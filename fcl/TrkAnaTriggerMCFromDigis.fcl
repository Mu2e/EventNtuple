#------------------------------------------------------------------------------
# runs the trigger on digis and create TrkAna trees for the 2 main trigger lines
#------------------------------------------------------------------------------
#  > mu2e --config TrkAnaTriggerMCFromDigis.fcl --source "your digis file" --TFile TATMC.root --nevts=100

#include "Offline/CommonMC/fcl/prolog_trigger.fcl"
#include "Production/JobConfig/digitize/prolog.fcl"
#include "EventNtuple/fcl/prolog_trigger.fcl"
#include "mu2e_trig_config/test/triggerTest.fcl"
#
#  Add MC truth matching for the highP_stopTarg triggers
#
physics.producers.SelectRecoMCTprDe : {
  @table::CommonMCTrigger.TTSelectRecoMC
  KalSeedCollections  : [ "TTKSFDe" ]
  HelixSeedCollections  : ["TTHelixMergerDe" ]
}
physics.producers.SelectRecoMCCprDe : {
  @table::CommonMCTrigger.TTSelectRecoMC
  KalSeedCollections  : [ "TTCalSeedFitDe" ]
  HelixSeedCollections  : ["TTCalHelixMergerDe" ]
}
physics.producers.SelectRecoMCApr : {
  @table::CommonMCTrigger.TTSelectRecoMC
  KalSeedCollections  : [ "TTAprKSF" ]
  HelixSeedCollections  : ["TTAprHelixMerger" ]
}

physics.producers.SelectRecoMCMprDe : {
  @table::CommonMCTrigger.TTSelectRecoMC
  KalSeedCollections  : [ "TTMprKSFDe" ]
  HelixSeedCollections  : ["TTMprHelixMergerDe" ]
}
physics.producers.MergeTTKSFDe : {
  module_type : MergeKalSeeds
  KalSeedCollections : ["TTKSFDe"]
}
physics.producers.MergeTTCalSeedFitDe : {
  module_type : MergeKalSeeds
  KalSeedCollections : ["TTCalSeedFitDe"]
}
physics.producers.MergeTTAprKSF : {
  module_type : MergeKalSeeds
  KalSeedCollections : ["TTAprKSF"]
}
physics.producers.MergeTTMprKSFDe : {
  module_type : MergeKalSeeds
  KalSeedCollections : ["TTMprKSFDe"]
}
#
#  Add these to the sequences
#
physics.tprDe_highP_stopTarg : [ @sequence::physics.tprDe_highP_stopTarg, SelectRecoMCTprDe, MergeTTKSFDe]
physics.cprDe_highP_stopTarg : [ @sequence::physics.cprDe_highP_stopTarg, SelectRecoMCCprDe, MergeTTCalSeedFitDe ]
physics.mprDe_highP_stopTarg : [ @sequence::physics.mprDe_highP_stopTarg, SelectRecoMCMprDe, MergeTTMprKSFDe]
physics.apr_highP_stopTarg   : [ @sequence::physics.apr_highP_stopTarg,   SelectRecoMCApr,   MergeTTAprKSF]

physics.analyzers.TAtprDe : {
  @table::TrkAnaTrigger.TrkAnaTT
  FitType : LoopHelix
  branches : [ @local::TrkAnaTrigger.TTtprDe ]
  KalSeedMCAssns: "SelectRecoMCTprDe"
  SelectEvents : [  "globalTrigger:tprDe_highP_stopTarg"  ]
  TriggerProcessName : "globalTrigger"
}

physics.analyzers.TAcprDe : {
  @table::TrkAnaTrigger.TrkAnaTT
  FitType : LoopHelix
  branches : [ @local::TrkAnaTrigger.TTcprDe ]
  KalSeedMCAssns: "SelectRecoMCCprDe"
  SelectEvents : [ "globalTrigger:cprDe_highP_stopTarg"  ]
  TriggerProcessName : "globalTrigger"
}
physics.analyzers.TAapr : {
  @table::TrkAnaTrigger.TrkAnaTT
  FitType : LoopHelix
  branches : [ @local::TrkAnaTrigger.TTapr ]
  KalSeedMCAssns: "SelectRecoMCApr"
  SelectEvents : [ "globalTrigger:apr_highP_stopTarg"  ]
  TriggerProcessName : "globalTrigger"
}
physics.analyzers.TAmprDe : {
  @table::TrkAnaTrigger.TrkAnaTT
  FitType : LoopHelix
  branches : [ @local::TrkAnaTrigger.TTmprDe ]
  KalSeedMCAssns: "SelectRecoMCMprDe"
  SelectEvents : [ "globalTrigger:mprDe_highP_stopTarg"  ]
  TriggerProcessName : "globalTrigger"
}

# this next produces additional hit-level payload to support MC truth matching.
# It produces functionally equivalent output as the standard module but is slower, so don't use this script for timing studies
#
physics.producers.TTmakeSH.FilterHits : false
physics.producers.TTmakePH.TestFlag : true
physics.producers.TTmakePH.StrawHitSelectionBits : ["EnergySelection","TimeSelection","RadiusSelection"]
physics.producers.TTmakePH.StrawHitMask          : ["Dead"]
#
services.ProditionsService.strawElectronics.overrideDbTimeOffsets : true
physics.EndPath : [TAtprDe, TAcprDe, TAapr, TAmprDe ]
physics.end_paths : [ EndPath ]
#
# DB config is needed to run the trigger, and must be consistent with the digis you're processing, see the MDC2020 wiki page for details
#
#services.DbService.purpose: MDC2020_best
#services.DbService.version: v1_3
#services.DbService.verbose : 2
